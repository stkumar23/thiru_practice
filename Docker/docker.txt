Docker
======

Docker Engine:
--------------
The main components are:
  - Docker Client
  - Docker daemon
  - containerd
  - runc

runc:
  It is the reference implementation of the OCI container runtime-spec.
  It is a small, lightweight CLI wrapper for libcontainer. The runc creates the
  containers.

containerd:
  It manages the lifecycle operations of a container, like, start, stop, pause
  or rm.
  In the docker engine stack, containerd sits between the daemon and runc at
  the OCI layer.

The Flow:
  The Docker Client converts the commands into appropriate API payload and POSTs
  them to the correct API endpoint (daemon uses REST API).

  The daemon receives the command and it makes the call to containerd. It
  communicates with containerd via a CRUD-style API over gRPC.

  Containerd converts the required docker image into an OCI bundle and tells
  runc to create a new container.

  runc interfaces with the OS kernel and create a container. The container
  process started as a child-process of runc and as soon as it is started,
  runc will exit.

  Once runc exits, associated containerd-shim process becomes the container's
  parent. It reports the container's exit status back to daemon.

Linux binaries name:
  dockerd (the Docker daemon)
  docker-containerd (containerd)
  docker-containerd-shim (shim)
  docker-runc (runc)


Docker Image:
  Docker image is a build-time constructs. Docker images are stored in image
  registries. Image registries contain multiple image repositories. Image
  repositories contain multiple images.

  It is a loosely-connected read-only layers. Use docker inspect command to
  view the list of layers the image has. Docker takes care of stacking these
  layers and representing them as a single unified object. Docker uses a storage
  driver to stack the layers and to represent them as a single object. Some
  Linux storage drivers are overlay2, devicemapper, btrfs.

  Each image is identified by a crypto ID that is hash of the config object.
  Each layer is identified by a crypto ID that is a hash of the content it
  contains. Images and layers are immutable.

  When an image is pushed to or pulled from a docker registry, it is send in
  compressed format. Hence, each image has a distrubution hash which is the
  crypto ID for the compressed state. This hash is used to verify the
  authenticity of the image.


Docker Container:
  Container is a run-time constructs. It is a runtime instance of an image.

  Use Ctrl+PQ to exit the container without killing it. Container will run in
  the background.

Docker Commands:
----------------
  - To check docker version
    docker version
    (this command should result in the version details of both client and
    server)

  - To check the status of the docker daemon (systemd supported host)
    systemctl is-active docker

  - To pull docker image from repository
    docker pull <repository>:<tag>

  - To view the list of all images stored in host's local cache
    docker images

  - To get the meta-data and layer data of an image
    docker inspect <repository>:<tag>

  - To delete the image
    docker rm <image_id>

  - To create and run an image in a container
    docker run -it <image> <command>

  - To connect to existing container
    docker exec -it <container_id or name> <terminal>
    ex: docker exec -it 12345678 /bin/bash

  - To delete all dangling images
    docker prune -a
    dangling image is an image that is no longer tagged and appears in listings
    as <none>:<none>. This happens when accidentaly build and tag a new image
    with existing image name and tag.


Docker Networking:
  Three major components:
  1. Container Network Model (CNM)
  2. libnetwork
  3. Drivers

  The CNM is the design specification. It outlines the fundamental building
  blocks of a Docker network.

  libnetwork is the real-world implementation of the CNM. Core compoenents of
  CNM are implemented. Also, implements native service discovery, ingress-based
  container load balancing and the network control plane and management plane
  functionality.

  Drivers extend the model by implementing the specific network topologies
  such as VXLAN-based overlay networks. This has data plane implementation.

  Three building blocks from CNM spec:
  1. Sandbox
  2. Endpoints
  3. Networks

  Sandbox: It is an isolated network stack. It includes Ethernet interfaces,
  ports, routing tables and DNS config.

  Endpoints: Virtual network interfaces. Like normal network interfaces, it is
  responsible for making connections. In CNM model, endpoints connects a
  sandbox to network. Endpoints behave like regular network adapters, they can
  be connected to a single network. If a container needs connection to multiple
  networks, it will require multiple endpoints.

  Networks: Software implementation of 802.1d bridge (switch).

  Docker networking commands:
  * docker network ls
    Lists all networks on the local Docker host

  * docker network inspect
    Provides detailed configuration information about a Docker network

  * docker network prune
    Deletes all unused networks on a Docker host

  * docket network rm
    Deletes specific networks on a Docker host

  * brctl show
    Linux command to list the bridges on the system

  * docker port <container name>
    Command to verify container port mapping


Containers, volumes and persistent data:
  Every container gets its own non-persistent data. It is autmatically created
  alongside the container and it is tied to the lifecycle of the container.
  When the container is deleted, its non-persistent data is also removed.

  Volume is used to store the container data in persist. Volume is de-coupled
  from the container lifecycle. When the container is removed, the volume is
  not removed. This volume can be mapped to new/other containers.

  On the Linux systems, the docker volume exists at
  /var/lib/docker/<storage-driver>/volumes

  Create a volume and attach (mount) it to the container.

  * docker volume create <volume name>
    Command to create docker volume

  * docker volume ls
    Lists existing docker volumes

  * docker volume inspect <volume name>
    Inspect the docker volume. Lists storage driver details, mount point, name
    and scope.

  * docker volume prune
    Delete all volumes which are not used by any container

  * docker volume rm <volume name>
    Delete specified volume which is not used by any container
