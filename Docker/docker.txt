Docker
======

Docker Engine:
--------------
The main components are:
  - Docker Client
  - Docker daemon
  - containerd
  - runc

runc:
  It is the reference implementation of the OCI container runtime-spec.
  It is a small, lightweight CLI wrapper for libcontainer. The runc creates the
  containers.

containerd:
  It manages the lifecycle operations of a container, like, start, stop, pause
  or rm.
  In the docker engine stack, containerd sits between the daemon and runc at
  the OCI layer.

The Flow:
  The Docker Client converts the commands into appropriate API payload and POSTs
  them to the correct API endpoint (daemon uses REST API).

  The daemon receives the command and it makes the call to containerd. It
  communicates with containerd via a CRUD-style API over gRPC.

  Containerd converts the required docker image into an OCI bundle and tells
  runc to create a new container.

  runc interfaces with the OS kernel and create a container. The container
  process started as a child-process of runc and as soon as it is started,
  runc will exit.

  Once runc exits, associated containerd-shim process becomes the container's
  parent. It reports the container's exit status back to daemon.

Linux binaries name:
  dockerd (the Docker daemon)
  docker-containerd (containerd)
  docker-containerd-shim (shim)
  docker-runc (runc)


Docker Image:
  Docker image is a build-time constructs. Docker images are stored in image
  registries. Image registries contain multiple image repositories. Image
  repositories contain multiple images.

  It is a loosely-connected read-only layers. Use docker inspect command to
  view the list of layers the image has. Docker takes care of stacking these
  layers and representing them as a single unified object. Docker uses a storage
  driver to stack the layers and to represent them as a single object. Some
  Linux storage drivers are overlay2, devicemapper, btrfs.

  Each image is identified by a crypto ID that is hash of the config object.
  Each layer is identified by a crypto ID that is a hash of the content it
  contains. Images and layers are immutable.

  When an image is pushed to or pulled from a docker registry, it is send in
  compressed format. Hence, each image has a distrubution hash which is the
  crypto ID for the compressed state. This hash is used to verify the
  authenticity of the image.


Docker Container:
  Container is a run-time constructs. It is a runtime instance of an image.

  Use Ctrl+PQ to exit the container without killing it. Container will run in
  the background.

Docker Commands:
----------------
  - To check docker version
    docker version
    (this command should result in the version details of both client and
    server)

  - To check the status of the docker daemon (systemd supported host)
    systemctl is-active docker

  - To pull docker image from repository
    docker pull <repository>:<tag>

  - To view the list of all images stored in host's local cache
    docker images

  - To get the meta-data and layer data of an image
    docker inspect <repository>:<tag>

  - To delete the image
    docker rm <image_id>

  - To create and run an image in a container
    docker run -it <image> <command>

  - To connect to existing container
    docker exec -it <container_id or name> <terminal>
    ex: docker exec -it 12345678 /bin/bash

  - To delete all dangling images
    docker prune -a
    dangling image is an image that is no longer tagged and appears in listings
    as <none>:<none>. This happens when accidentaly build and tag a new image
    with existing image name and tag.
