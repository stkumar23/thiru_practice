Google Test
-----------
It is a testing framework developed by Google team, to support writing tests
for C++ programs. The framework supports any kind of tests, like functional
and unit tests.

Test: Individual test validates a specific functionality of the program.
Test Suite: Multiple tests are grouped in a test suite.
Test Fixture: Contains a common objects and subroutines that are shared by
            multiple tests in a test suite.
Test program: Contains multiple test suites.

Assertions:
-----------
GoogleTest assertions are macros that resumble function calls.
Two types of assertions:
ASSERT_* - generates fatal failures, aborts the current function when they fail
EXPECT_* - generates non-fatal failures, which don't abort the current function

EXPECT assertions are preferred, to capture multiple failures in a test.
However, ASSERT assertions are used when it does not make sense to continue
when the assertion in question fails.

Assertion reference: defined in the header, <gtest/gtest.h>

// verifies true condition
EXPECT_TRUE(condition) << "assertion failure message";
ASSERT_TRUE(condition) << "assertion failure message";

// verifies false condition
EXPECT_FALSE(condition) << "assertion failure message";
ASSERT_FALSE(condition) << "assertion failure message";

// verifies val1 == val2
EXPECT_EQ(val1, val2) << "assertion failure message";
ASSERT_EQ(val1, val2) << "assertion failure message";

// verifies val1 != val2
EXPECT_NE(val1, val2) << "assertion failure message";
ASSERT_NE(val1, val2) << "assertion failure message";

// verifies val1 < val2
EXPECT_LT(val1, val2) << "assertion failure message";
ASSERT_LT(val1, val2) << "assertion failure message";

// verifies val1 > val2
EXPECT_GT(val1, val2) << "assertion failure message";
ASSERT_GT(val1, val2) << "assertion failure message";

// verifies val1 <= val2
EXPECT_LE(val1, val2) << "assertion failure message";
ASSERT_LE(val1, val2) << "assertion failure message";

// verifies val1 >= val2
EXPECT_GE(val1, val2) << "assertion failure message";
ASSERT_GE(val1, val2) << "assertion failure message";

// Compare two C strings equal
EXPECT_STREQ(str1, str2) << "assertion failure message";
ASSERT_STREQ(str1, str2) << "assertion failure message";

// To compare C string with null
EXPECT_STREQ(str1, nullptr) << "assertion failure message";
EXPECT_STRNE(str1, nullptr) << "assertion failure message";

// Compare two C strings not equal
EXPECT_STRNE(str1, str2) << "assertion failure message";
ASSERT_STRNE(str1, str2) << "assertion failure message";

// Compare two C strings equal, ignore case
EXPECT_STRCASEEQ(str1, str2) << "assertion failure message";
ASSERT_STRCASEEQ(str1, str2) << "assertion failure message";

// Compare two C strings not equal, ignore case
EXPECT_STRCASENE(str1, str2) << "assertion failure message";
ASSERT_STRCASENE(str1, str2) << "assertion failure message";


Simple Tests
------------
To create a test:
  * Use the TEST() macro to define and name a test function.
  * This function does not return a value.
  * The test result is determined by the assertions.
  * First argument is the test suite name, the second argument is
    the test case name.
  ex: TEST(CheckDigitTest, SingleDigit)


Test Fixture
------------
Test Fixture can be used, when two or more tests are operating on similar data.
  * This macro is defined as TEST_F()
  * The first argument is the name of the test fixture class, instead of test
    suite name.
  * The second argument is the name of the test.
  * Write SetUp() function to prepare the objects for each test.
  * Write TearDown() function to release any resources allocated in each test.
  * Constructor, Descructor, SetUp and TearDown functions should be declared
    as protected functions in the test fixture class.
  Format: TEST_F(FixtureClassName, TestName)


Filter
------
By default, a GoogleTest program runs all tests the user has defined. Filter can
be used to execute particular test case, when the test suite contains multiple
test cases. This is very helpful to run one or few test cases intead of running
all the test cases.

  * use the option --gtest_filter
  ex: ./a.out --gtest_filter=CheckDigitTest.SingleDigit
  * The format of a filter is a ‘:‘-separated list of wildcard patterns
  * '-' can be used to exclude a test case
